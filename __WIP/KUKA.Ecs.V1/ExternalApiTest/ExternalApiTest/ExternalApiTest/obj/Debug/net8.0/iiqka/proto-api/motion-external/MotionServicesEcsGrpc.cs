// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: iiqka/proto-api/motion-external/motion_services_ecs.proto
// </auto-generated>
// Original file comments:
// This material is the exclusive property of KUKA.
// Except as expressly permitted by separate agreement, this material
// may only be used by members of the development department of KUKA
// for internal development purposes of KUKA.
//
// Copyright (C) KUKA. All Rights Reserved.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kuka.Ecs.V1 {
  /// <summary>
  /// External control gRPC Service
  /// </summary>
  public static partial class ExternalControlService
  {
    static readonly string __ServiceName = "iiqka.proto_api.motion_external.ExternalControlService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.OpenControlChannelRequest> __Marshaller_iiqka_proto_api_motion_external_OpenControlChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.OpenControlChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.OpenControlChannelResponse> __Marshaller_iiqka_proto_api_motion_external_OpenControlChannelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.OpenControlChannelResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.ObserveControlStateRequest> __Marshaller_iiqka_proto_api_motion_external_ObserveControlStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.ObserveControlStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.CommandState> __Marshaller_iiqka_proto_api_motion_external_CommandState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.CommandState.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.StartMonitoringRequest> __Marshaller_iiqka_proto_api_motion_external_StartMonitoringRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.StartMonitoringRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.StartMonitoringResponse> __Marshaller_iiqka_proto_api_motion_external_StartMonitoringResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.StartMonitoringResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.StopMonitoringRequest> __Marshaller_iiqka_proto_api_motion_external_StopMonitoringRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.StopMonitoringRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.StopMonitoringResponse> __Marshaller_iiqka_proto_api_motion_external_StopMonitoringResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.StopMonitoringResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.SetQoSProfileRequest> __Marshaller_iiqka_proto_api_motion_external_SetQoSProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.SetQoSProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Kuka.Ecs.V1.SetQoSProfileResponse> __Marshaller_iiqka_proto_api_motion_external_SetQoSProfileResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kuka.Ecs.V1.SetQoSProfileResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Kuka.Ecs.V1.OpenControlChannelRequest, global::Kuka.Ecs.V1.OpenControlChannelResponse> __Method_OpenControlChannel = new grpc::Method<global::Kuka.Ecs.V1.OpenControlChannelRequest, global::Kuka.Ecs.V1.OpenControlChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OpenControlChannel",
        __Marshaller_iiqka_proto_api_motion_external_OpenControlChannelRequest,
        __Marshaller_iiqka_proto_api_motion_external_OpenControlChannelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Kuka.Ecs.V1.ObserveControlStateRequest, global::Kuka.Ecs.V1.CommandState> __Method_ObserveControlState = new grpc::Method<global::Kuka.Ecs.V1.ObserveControlStateRequest, global::Kuka.Ecs.V1.CommandState>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ObserveControlState",
        __Marshaller_iiqka_proto_api_motion_external_ObserveControlStateRequest,
        __Marshaller_iiqka_proto_api_motion_external_CommandState);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Kuka.Ecs.V1.StartMonitoringRequest, global::Kuka.Ecs.V1.StartMonitoringResponse> __Method_StartMonitoring = new grpc::Method<global::Kuka.Ecs.V1.StartMonitoringRequest, global::Kuka.Ecs.V1.StartMonitoringResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartMonitoring",
        __Marshaller_iiqka_proto_api_motion_external_StartMonitoringRequest,
        __Marshaller_iiqka_proto_api_motion_external_StartMonitoringResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Kuka.Ecs.V1.StopMonitoringRequest, global::Kuka.Ecs.V1.StopMonitoringResponse> __Method_StopMonitoring = new grpc::Method<global::Kuka.Ecs.V1.StopMonitoringRequest, global::Kuka.Ecs.V1.StopMonitoringResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopMonitoring",
        __Marshaller_iiqka_proto_api_motion_external_StopMonitoringRequest,
        __Marshaller_iiqka_proto_api_motion_external_StopMonitoringResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Kuka.Ecs.V1.SetQoSProfileRequest, global::Kuka.Ecs.V1.SetQoSProfileResponse> __Method_SetQoSProfile = new grpc::Method<global::Kuka.Ecs.V1.SetQoSProfileRequest, global::Kuka.Ecs.V1.SetQoSProfileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetQoSProfile",
        __Marshaller_iiqka_proto_api_motion_external_SetQoSProfileRequest,
        __Marshaller_iiqka_proto_api_motion_external_SetQoSProfileResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kuka.Ecs.V1.MotionServicesEcsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ExternalControlService</summary>
    public partial class ExternalControlServiceClient : grpc::ClientBase<ExternalControlServiceClient>
    {
      /// <summary>Creates a new client for ExternalControlService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExternalControlServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExternalControlService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExternalControlServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExternalControlServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExternalControlServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Start external control
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.OpenControlChannelResponse OpenControlChannel(global::Kuka.Ecs.V1.OpenControlChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenControlChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start external control
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.OpenControlChannelResponse OpenControlChannel(global::Kuka.Ecs.V1.OpenControlChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenControlChannel, null, options, request);
      }
      /// <summary>
      /// Start external control
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.OpenControlChannelResponse> OpenControlChannelAsync(global::Kuka.Ecs.V1.OpenControlChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenControlChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start external control
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.OpenControlChannelResponse> OpenControlChannelAsync(global::Kuka.Ecs.V1.OpenControlChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenControlChannel, null, options, request);
      }
      /// <summary>
      /// Observe external control state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Kuka.Ecs.V1.CommandState> ObserveControlState(global::Kuka.Ecs.V1.ObserveControlStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ObserveControlState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Observe external control state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Kuka.Ecs.V1.CommandState> ObserveControlState(global::Kuka.Ecs.V1.ObserveControlStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ObserveControlState, null, options, request);
      }
      /// <summary>
      /// Start External motinoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.StartMonitoringResponse StartMonitoring(global::Kuka.Ecs.V1.StartMonitoringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartMonitoring(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start External motinoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.StartMonitoringResponse StartMonitoring(global::Kuka.Ecs.V1.StartMonitoringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartMonitoring, null, options, request);
      }
      /// <summary>
      /// Start External motinoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.StartMonitoringResponse> StartMonitoringAsync(global::Kuka.Ecs.V1.StartMonitoringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartMonitoringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start External motinoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.StartMonitoringResponse> StartMonitoringAsync(global::Kuka.Ecs.V1.StartMonitoringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartMonitoring, null, options, request);
      }
      /// <summary>
      /// Stop External monitoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.StopMonitoringResponse StopMonitoring(global::Kuka.Ecs.V1.StopMonitoringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopMonitoring(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop External monitoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.StopMonitoringResponse StopMonitoring(global::Kuka.Ecs.V1.StopMonitoringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopMonitoring, null, options, request);
      }
      /// <summary>
      /// Stop External monitoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.StopMonitoringResponse> StopMonitoringAsync(global::Kuka.Ecs.V1.StopMonitoringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopMonitoringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop External monitoring
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.StopMonitoringResponse> StopMonitoringAsync(global::Kuka.Ecs.V1.StopMonitoringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopMonitoring, null, options, request);
      }
      /// <summary>
      /// Set values for the used QoS profiles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.SetQoSProfileResponse SetQoSProfile(global::Kuka.Ecs.V1.SetQoSProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQoSProfile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set values for the used QoS profiles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Kuka.Ecs.V1.SetQoSProfileResponse SetQoSProfile(global::Kuka.Ecs.V1.SetQoSProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetQoSProfile, null, options, request);
      }
      /// <summary>
      /// Set values for the used QoS profiles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.SetQoSProfileResponse> SetQoSProfileAsync(global::Kuka.Ecs.V1.SetQoSProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQoSProfileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set values for the used QoS profiles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Kuka.Ecs.V1.SetQoSProfileResponse> SetQoSProfileAsync(global::Kuka.Ecs.V1.SetQoSProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetQoSProfile, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ExternalControlServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExternalControlServiceClient(configuration);
      }
    }

  }
}
#endregion
